data <- read.csv("sensor_readings_24.data")
View(data)
View(data)
data <- read.csv("sensor_readings_24.data", col.names = FALSE)
data <- read.csv("sensor_readings_24.data",header = FALSE)
str(data)
md.pattern(data)
library(mice)
md.pattern(data)
dataOlah <- data
str(dataOlah)
library(mice)
md.pattern(dataOlah)
dataOlah$v25 <- NULL
library(mice)
md.pattern(dataOlah)
dataOlah$V25 <- NULL
library(mice)
md.pattern(dataOlah)
colnames<-(data, nilai)
pamk.result <- pamk(dataOlah)
library("fpc", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("pamr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library(fpc)
pamk.result <- pamk(dataOlah)
pamk.result
pamk.resul$nc
pamk.result$nc
boxplot(dataOlah, use.cols = TRUE) #ada noise di f6, hapus saja
summary(dataOlah)
str(dataOlah)
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataolah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
}
if(is.numeric(dataolah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
datatest[,i] = remove_outliers(datatest[,i])
}
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[,i] = remove_outliers(dataOlah[,i])
}
}
boxplot(dataOlah, use.cols = TRUE) #ada noise di f6, hapus saja
boxplot(data, use.cols = TRUE) #ada noise di f6, hapus saja
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[,i] = remove_outliers(dataOlah[,i])
}
}
pamk.result <- pamk(dataOlah)
View(dataOlah)
pamk.result
data <- read.csv("sensor_readings_24.data",header = FALSE)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
dataOlah <- data
dataOlah$V25 <- NULL
library(mice)
boxplot(dataOlah, use.cols = TRUE) #ada noise di f6, hapus saja
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[,i] = remove_outliers(dataOlah[,i])
}
}
for (i in 1:ncol(dataOlah)-1){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[is.na(dataOlah[,i]), i] <- mean(dataOlah[,i], na.rm = TRUE)
}
}
1`for (i in 1:ncol(dataOlah)-1){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
min = min(dataOlah[,i])
max = max(dataOlah[,i])
for (j in 1:nrow(dataOlah)){
dataOlah[j,i] = (dataOlah[j,i]-min)/(max-min)
}
}
}
pamk.result <- pamk(dataOlah)
pamk.result
table(pamk.result$pamobject$clustering, data$V25)
boxplot(dataOlah, use.cols = TRUE) #ada noise di f6, hapus saja
(kmeans.results <- kmeans(dataOlah, 4))
(kmeans.result <- kmeans(dataOlah, 4))
(kmeans.result <- kmeans(data, 4))
kmeans.result <- kmeans(dataOlah, 4)
(kmeans.result <- kmeans(dataOlah, 4))
md.pattern(dataOlah)
for (i in 1:ncol(dataOlah)-1){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[is.na(dataOlah[,i]), i] <- mean(dataOlah[,i], na.rm = TRUE)
}
}
md.pattern(dataOlah)
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
# replace missing value dengan mean collumn
dataOlah[is.na(dataOlah[,i]), i] <- mean(dataOlah[,i], na.rm = TRUE)
}
}
md.pattern(dataOlah)
(kmeans.result <- kmeans(dataOlah, 4))
1`for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
min = min(dataOlah[,i])
max = max(dataOlah[,i])
for (j in 1:nrow(dataOlah)){
dataOlah[j,i] = (dataOlah[j,i]-min)/(max-min)
}
}
}
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
min = min(dataOlah[,i])
max = max(dataOlah[,i])
for (j in 1:nrow(dataOlah)){
dataOlah[j,i] = (dataOlah[j,i]-min)/(max-min)
}
}
}
(kmeans.result <- kmeans(dataOlah, 4))
(kmeans.result <- kmeans(dataOlah, 4))
for (i in 1:ncol(dataOlah)){
# loop ini mengecek apakah num atau tidak, jika TRUE, replace missing val
if(is.numeric(dataOlah[,i])){
min = min(dataOlah[,i])
max = max(dataOlah[,i])
for (j in 1:nrow(dataOlah)){
dataOlah[j,i] = (dataOlah[j,i]-min)/(max-min)
}
}
}
(kmeans.result <- kmeans(dataOlah, 4))
var1 = 1:7
var2 = c(-3, -2, -1, 0, 1, 2, 3)
var3 = c(9, 4, 1, 0, 1, 4, 9)
dataset = data.frame(var1, var2, var3)
View(dataset)
miss1 = 1:7
miss2 = c(12, 9, 5, NA, 1, 2, 3)
miss3 = c(9, 9, 9, NA, 1, 4, 9)
miss4 = c('Manchunian', 'Manchunian', 'Manchunian', NA, 'Manchunian', 'Kopites', 'Blues')
datamiss = data.frame(miss1, miss2, miss3, miss4)
g_range = range(var2, var3) #untuk cari maks min
plot(dataset$var2, type = 'o', col='blue', ylim = g_range, axes = FALSE, ann = FALSE) #ann = label x dan y, axes garis tepi
axis(1, at = 1:7, lab = c('senin', 'selasa', 'rabu', 'kamis', 'juamt', 'sabtu', 'minggu'))
plot(dataset$var2, type = 'o', col='blue', ylim = g_range, axes = FALSE, ann = FALSE) #ann = label x dan y, axes garis tepi
axis(1, at = 1:7, lab = c('senin', 'selasa', 'rabu', 'kamis', 'juamt', 'sabtu', 'minggu'))
axis(2, las=1, at=1*-3:g_range[2]) #[1]nilai minimum, [2] nilai maksimum
plot(dataset$var2, type = 'o', col='blue', ylim = g_range, axes = FALSE, ann = FALSE) #ann = label x dan y, axes garis tepi
axis(1, at = 1:7, lab = c('senin', 'selasa', 'rabu', 'kamis', 'juamt', 'sabtu', 'minggu'))
plot(dataset$var2, type = 'o', col='blue', ylim = g_range, axes = FALSE, ann = FALSE) #ann = label x dan y, axes garis tepi
axis(1, at = 1:7, lab = c('senin', 'selasa', 'rabu', 'kamis', 'juamt', 'sabtu', 'minggu'))
axis(2, las=1, at=1*-3:g_range[2]) #[1]nilai minimum, [2] nilai maksimum
plot(dataset$var2, type = 'o', col='blue', ylim = g_range, axes = FALSE, ann = FALSE) #ann = label x dan y, axes garis tepi
axis(1, at = 1:7, lab = c('senin', 'selasa', 'rabu', 'kamis', 'juamt', 'sabtu', 'minggu'))
axis(2, las=1, at=1*-3:g_range[2]) #[1]nilai minimum, [2] nilai maksimum
lines(dataset$var3, type = 'o', pch=22, lty=2, col='red')
title(main='produktivitas', col.main='red', font.main='4')
title(xlab = "Hari", col.lab='red')
title(ylab = "level", col.lab='red')
legend(1,g_range[2],c('semangat hidup', 'keceriaan'), cex = 0.8, col = c('blue', 'red'), pch =21) #cex ukuran legend, pch itu nomor symbol label
barplot(as.matrix(dataset), main="Produktivitas", ylab='level', beside = TRUE, col = rainbow(7))
barplot(as.matrix(dataset), main="Produktivitas", ylab='level', beside = TRUE, col = rainbow(7))
legend('topleft', c('senen', 'selasa', 'rabu', 'kamis', 'jumat', 'sabtu', 'minggu'), cex = 0.8, bty = 'n', fill = rainbow(7))
barplot(as.matrix(dataset), main="Produktivitas", ylab='level', beside = TRUE, col = rainbow(7))
summary(datamiss)
var1 = 1:7
var2 = c(-3, -2, -1, 0, 1, 2, 3)
var3 = c(9, 4, 1, 0, 1, 4, 9)
dataset = data.frame(var1, var2, var3)
miss1 = 1:7
miss2 = c(12, 9, 5, NA, 1, 2, 3)
miss3 = c(9, 9, 9, NA, 1, 4, 9)
miss4 = c('Manchunian', 'Manchunian', 'Manchunian', NA, 'Manchunian', 'Kopites', 'Blues')
datamiss = data.frame(miss1, miss2, miss3, miss4)
data_range = range(var2, var3)
plot(datase$v2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
plot(dataset$v2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
var1 = 1:7
plot(dataset$var2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
plot(dataset$var2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
axis(1,  at= 1:7, labels = c('Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'sabtu', 'minguu'))
plot(dataset$var2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
axis(1,  at= 1:7, labels = c('Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'sabtu', 'minguu'))
plot(dataset$var2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
axis(1,  at= 1:7, labels = c('Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'sabtu', 'minguu'))
axis(2, las = 2, at=1*-3:grange[2])
plot(dataset$var2, type='o', ylim = data_range, col='blue', axes = FALSE, ann = FALSE)
axis(1,  at= 1:7, labels = c('Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'sabtu', 'minguu'))
axis(2, las = 2, at=1*-3:data_range[2])
summary(datamiss)
summary(datamiss)
for(i in 1:ncol(datamiss)){
if(is.numeric(datamiss[, i])){
datamiss[is.na(datamiss[, i]), i] <- mean(datamiss[, i], na.rm = true)
}
}
datamiss[is.na(datamiss[, i]), i] <- mean(datamiss[, i], na.rm = TRUE)
datamiss[is.na(datamiss[, i]), i] <-mean(datamiss[, i], na.rm = TRUE)
for(i in 1:ncol(datamiss)){
if(is.numeric(datamiss[, i])){
datamiss[is.na(datamiss[, i]), i] <-mean(datamiss[, i], na.rm = TRUE)
}
}
dataIris = iris #data yang ku punya gak punya kelas hanya rakyat biasa. Jadi summon iris
dataclustering<-dataIris
dataclustering$Species<- NULL #null kan class jika ada.
(kmeans.result<-kmeans(dataclustering,3))
table(dataIris$Species, kmeans.result$cluster)
plot(dataIris[c("Sepal.Length", "Petal.Lenght")], col = kmeans.result$cluster)
points(kmeans.result$centers[,c("Sepal.Lenght", "Petal.Lenght")], col = 1:3, pch = 8, cex=2)
data1 <- data.csv('data1.csv')
data1 <- data.csv('data1.csv')
data1 <- read.csv('data1.csv')
data2 <- read.csv('data2.csv')
g_range <- range(data1, data2)
View(data2)
summary(data1)
str(data1)
str(data2)
summary(data1)
summary(data2)
View(data2)
barplot(as.matrix(data1), main="Produktivitas", ylab='level', beside = TRUE, col = rainbow(7))
barplot(as.matrix(data1), main="Produktivitas", ylab='level', beside = TRUE, col = rainbow(7))
barplot(as.matrix(data1), main="Data1.csv", ylab='Nilai', beside = TRUE, col = rainbow(7))
bocplot(data1, main="Data1.csv", ylab='Nilai')
boxplot(data1, main="Data1.csv", ylab='Nilai')
boxplot(data2, main="Data2.csv", ylab='Nilai')
dataGabung = rbind(data1, data2)
for (i in 1:ncol(dataGabung)){
if(is.numeric(dataGabung[,i])){
datamiss[is.na(dataGabung[,i]), i] <- mean(dataGabung[,i], na.rm = TRUE)
}
}
for (i in 1:ncol(dataGabung)){
if(is.numeric(dataGabung[,i])){
dataGabung[is.na(dataGabung[,i]), i] <- mean(dataGabung[,i], na.rm = TRUE)
}
}
View(dataGabung)
summary(dataGabung)
dataBaru<-dataGabung[which(dataGabung$B>53 & dataGabung$D>38),]
dataBaru1<-dataBaru[sample(1:nrow(data),200,replace=FALSE),]
dataBaru1<-dataBaru[sample(1:nrow(dataBaru),200,replace=FALSE),]
summary(dataBaru)
summary(dataBaru1)
str(dataBaru1)
str(dataBaru)
str(dataBaru1)
dataclustering<-dataBaru1
(kmeans.result<-kmeans(dataclustering,3))
dataIris = iris #data yang ku punya gak punya kelas hanya rakyat biasa. Jadi summon iris
dataclustering<-dataIris
dataclustering$Species<- NULL #null kan class jika ada.
(kmeans.result<-kmeans(dataclustering,3))
plot(dataIris[c("A", "B")], col = kmeans.result$cluster)
plot(dataBaru1[c("A", "B")], col = kmeans.result$cluster)
plot(dataBaru1[c("A", "B", "C", "D", "E")], col = kmeans.result$cluster)
plot(dataBaru1[c("A", "B", "C", "D", "E")], col = kmeans.result$cluster)
points(kmeans.result$centers[,c("A", "B", "C, "D", "E)], col = 1:3, pch = 8, cex=2)
plot(dataBaru1[c("A", "B", "C", "D", "E")], col = kmeans.result$cluster)
> library(fpc)
library(fpc)
pamk.result <- pamk(dataBaru1)
> layout(matrix(c(1,2),1,2))
layout(matrix(c(1,2),1,2))
plot(pam.result)
plot(pamk.result)
layout(matrix(c(1,2),1,2))
plot(pamk.result)
plot(pamk.result)
pamk.result <- pam(dataBaru1, 3)
install.packages("pamr")
library("pamr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
pamk.result <- pam(dataBaru1, 3)
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
plot(pamk.result)
layout(matrix(1))
pamk.result <- pam(dataBaru1, 3)
layout(matrix(c(1,2),1,2))
plot(pamk.result)
data <- read.csv("sensor_readings_24.data",header = FALSE)
View(data)
setwd("~/Desktop/PCD/Project/code/jst/neural-network-iris")
data <- read.csv("tomat.csv",header = FALSE)
data <- read.csv("tomat.csv",header = FALSE)
datas$V8 <- as.factor(as.character(datas$V8))
datas <- data
datas$V8 <- as.factor(as.character(datas$V8))
datas$V7 <- as.factor(as.character(datas$V8))
datas$V7 <- as.factor(as.character(datas$V7))
set.seed(100)
sample.ind = sample(2,
nrow(datas),
replace =  T,
prob = c(0.1, 0.9)
)
dataTest = datas[sample.ind==1,]
dataTrain = datas[sample.ind==2,]
library(e1071)
tomatku = svm(V8 ~., data=dataTrain)
tomatku = svm(V7 ~., data=dataTrain)
dataTest$Predicted = predict(tomatku, dataTest)
library(caret)
print(
confusionMatrix(data =dataTest$Predicted,
reference=dataTest$V7
)
)
View(data)
data <- read.csv("mytomat.csv",header = FALSE)
setwd("~/Desktop/PCD/Project/code/segmentasi/Klasifikaksi")
data <- read.csv("mytomat.csv",header = FALSE)
datas <- data
datas[, 1] <- NULL
set.seed(100)
sample.ind = sample(2,
nrow(datas),
replace =  T,
prob = c(0.1, 0.9)
)
dataTest = datas[sample.ind==1,]
dataTrain = datas[sample.ind==2,]
library(e1071)
tomatku = svm(V8 ~., data=dataTrain)
dataTest$Predicted = predict(tomatku, dataTest)
library(caret)
print(
confusionMatrix(data =dataTest$Predicted,
reference=dataTest$V8
)
)
